/* auto-generated by NAPI-RS */
/* eslint-disable */
export declare class QqBotEndpoint {
  constructor(config: QqBotConfig)
  start(): Promise<void>
  terminate(): Promise<void>
  registerCallback(callback: ((err: Error | null, arg: Event) => any)): void
  getFriendList(): Promise<Array<[string, string]>>
  getGroupMember(groupId: string, userId: string): Promise<GroupMemberInfo>
  deleteMessage(messageId: string): Promise<void>
  sendGroupMessage(groupId: string, message: Array<Mockv2MessageChain>): Promise<SendGroupMsgResp>
}
export type QQBotEndpoint = QqBotEndpoint

export declare function calcDominantColor(img: Uint8Array): Array<number>

export type Event =
  | { type: 'Connected', name: string, qq: string }
  | { type: 'GroupMessage', selfId: string, groupId: string, sender: GroupMemberInfo, message: Array<Mockv2MessageChain> }
  | { type: 'GroupMessageDeleted', groupId: string, selfId: string, messageId: string }
  | { type: 'Closed' }

export interface ForwardItem {
  senderName: string
  messageChain: Array<Mockv2MessageChain>
}

export interface GroupMemberInfo {
  userId: string
  nick?: string
  name?: string
}

export declare function initialize(): boolean

export interface MemberInfo {
  nick: string
  name: string
}

export type Mockv2MessageChain =
  | { type: 'Forward', nodeList: Array<ForwardItem> }
  | { type: 'Quote', id: string }
  | { type: 'Plain', text: string }
  | { type: 'At', target: number, display?: string }
  | { type: 'Source', id: string }
  | { type: 'ImageInbound', url: string, imageId?: string }
  | { type: 'ImageOutbound', buffer: Uint8Array, mime: string }
  | { type: 'Unknown', placeholder: string }
  | { type: 'Error', message: string }

export declare function plus100(input: number): number

export interface QqBotConfig {
  addr: string
  accessToken: string
}

export interface SendGroupMsgResp {
  messageId: string
}

export declare function testUint8Array(elem: Mockv2MessageChain): void
